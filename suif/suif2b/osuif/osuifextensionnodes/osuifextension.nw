% -*- mode: Noweb; noweb-code-mode: c++-mode -*-


\section{The OSUIF Extensions}

\subsection{Module [[osuifextension]]}

The OSUIF extensions subclass from IR nodes defined in {\tt
osuifnodes}, and {\tt cfenodes}.

<<*>>=

#include "basicnodes/basic.hoof"
#include "suifnodes/suif.hoof"
#include "cfenodes/cfe.hoof"
#include "osuifnodes/osuif.hoof"


module osuifextension {
  include <iostream.h>;
  include "iokernel/cast.h";
  include "basicnodes/basic.h";
  include "suifnodes/suif.h";
  include "cfenodes/cfe.h";
  include "osuifnodes/osuif.h";
  include "osuifnodes/osuif_factory.h";

  import basicnodes;
  import suifnodes;
  import cfenodes;
  import osuifnodes;

<<[[osuifextension]] class declarations>>
}
@

The OSUIF extensions consist of the following IR nodes:
 
<<[[osuifextension]] class declarations>>=
<<class [[SingleInheritanceClassType]]>>
<<class [[StaticMethodCallExpression]]>>
<<class [[InstanceMethodCallExpression]]>>
@


\subsection{Class [[SingleInheritanceClassType]]}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{l_SingleInheritanceClassType}

This class is implementes a single inheritance type hierarchy.
Special lookup functions are avaliable to search the hierarchy.  A
SingleInheritanceClassType is restricted to having at most a single
parent class.

Typically, dispatch for single inheritance is implemented with a
virtual function table (vtbl). The {\tt vtbl\_symbol} field can be
used to refer to the vtbl, which is typically a statically initialized
data structure.

<<class [[SingleInheritanceClassType]]>>=
concrete SingleInheritanceClassType : ClassType {
  VariableSymbol * reference vtbl_symbol omitted;
@ 

\subsubsection {Class level lookup}

These method are defined to lookup class level symbols.  These
symbols are commonly refered to as 'static' is C++ or java

<<class [[SingleInheritanceClassType]]>>=
CPP_DECLARE
@

Follow the parent chain.  Descendent class types may redefine
how the parent link is followed.

<<class [[SingleInheritanceClassType]]>>=
public:
  virtual SingleInheritanceClassType* parent_class();

  virtual bool is_super_class( SingleInheritanceClassType* sub_class );
  virtual bool is_sub_class( SingleInheritanceClassType* super_class );

  virtual StaticMethodSymbol* lookup_static_method( const LString& name,
	                                    StaticMethodType* mtype);
  virtual StaticFieldSymbol* lookup_static_field (const LString& name);
@

\subsubsection {Class Instance level lookup}

These method are defined to lookup instance level symbols.  These
symbols are common field and methods  is C++ or java.

<<class [[SingleInheritanceClassType]]>>=
  virtual InstanceMethodSymbol*
  lookup_local_instance_method_symbol( const LString& name,
	                               InstanceMethodType* mtype );
  virtual InstanceMethodSymbol*
  lookup_transitive_instance_method_symbol( const LString& name,
	                                    InstanceMethodType* mtype );

  virtual InstanceFieldSymbol*
  lookup_transient_instance_field( const LString& name );
CPP_DECLARE

@

<<class [[SingleInheritanceClassType]]>>=
};
@


\subsection{Class [[InstanceMethodCallExpression]]}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{l_InstanceMethodCallExpression}

<<class [[InstanceMethodCallExpression]]>>=
concrete InstanceMethodCallExpression : CallExpression {
  InstanceMethodSymbol * reference target_method;
  bool is_dispatched;
};
@


\subsection{Class [[StaticMethodCallExpression]]}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{l_StaticMethodCallExpression}

<<class [[StaticMethodCallExpression]]>>=
concrete StaticMethodCallExpression : CallExpression {
  StaticMethodSymbol * reference target_method;
};
@
